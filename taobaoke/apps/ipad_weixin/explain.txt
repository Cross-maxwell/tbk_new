

weixin_bot.py:
    1. login
        param: md_username
        process: use get_qrcode method to get the md_username's oss_path, qrcode_rsp and devide_id
                 使用 check_and_confirm_and_load 函数判断用户是否成功登录
    2. get_qrcode
        param: md_username
        process：
            a. build a connection with wechat use async_chat
            b. device_id = get_md5(md_username)
            c. 组织发往A服务器的gRPC包, 发送至A服务器， 得到响应， 并发送给微信服务器。
            d. 将得到的响应中的部分字段更新至发往A服务器的包， 并再次发送给A服务器进行“解密”。
            e. 取出uuid字段， 并将上面的响应存入数据库中。
            f. 在我们自己的远程服务器中通过地址规则构造出登录二维码的URL[oss_path], 并返回。
    3. check_and_confirm_and_load
        param: qrcode_rsp, device_id
        process：
            use check_qrcode_login
            use confirm_qrcode_login
            use new_init
            use async_check(v_user)
    4. check_qrcode_login
        param: qrcode_rsp, device_id
        process:
            a. 取出qrcode_rsp中的buffer, 拿到uuid, notify_key_str, long_head, start_time
            b. 并将device_id变为实例属性
            c. 进入循环，循环条件 qr_code['Status'] is not 2。那么也就是说，如果用户扫了吗并确认的话，其Status == 2
                组包[packet]， 发送给A服务器[得到A_rsp], 将A_rsp发送给微信服务器[得到W_rsp]，将packet中
                的某些字段更新，跟新来源于W_rsp， 发送给A服务器[得到A_rsp_02], 对A_rsp_02进行解包操作，并判断：
                    如果 qr_code['Status'] == 2：
                        数据库查询出原来的uuid row， 并进行更新
    5. confirm_qrcode_login
        param: qr_code, keep_heart_beat
        process:
            a. bot_param = BotParam.objects.filter(Username=qr_code['Username']).first()
            b. 当 bot_param 存在且字段LongHost不为空时与微信建立连接
            c. 过程类似：组包，发送A， 发送给wechat， 得到响应进行更新。当 ret参数为0时， 进行数据库的存储操作。

        return：True|False
    6. new_init
        作用：登录初始化，拉取联系人
        param: v_user
        process:
            a. bot_param = BotParam.objects.filter(username=v_user.userame).first()
            b. 组包，发送A，发送至wechat，得到响应 msg_list，从 msg_list中取出数据并保存至数据库, 并将v_user存入 redis

    7. async_check
        作用：同步消息，从微信中拉取消息

    以上就是 login 函数所做的全部工作。

    8. send_text_msg
        param: user_name, content, v_user
        process:
            发送text信息较为简单，组包，发送给A，得到响应后取出buffer，直接发送给wechat

    9. send_img_msg
        param: user_name, v_user, img_url
        process:
            发送图片信息稍微麻烦一些，需要对图片的大小进行判断，将图片分包，每个包的发送同 send_text_msg

weixin_scripts/post_taobaoke.py:
    1. post_taobaoke_url
        param: gid, hid, username
               发单人的wx_id, 群的id, 手机号
        process:
            组包，组包完成后向 broadcast App的 /interact/push-product/[entry_views.push_product] 发送post请求

            push_product
            params: request
            process:
                a. 取出request.body中的数据，并在数据库中筛选商品
                b. 第一次筛选条件：没有在该群推送过的、推送时间在3天以内的, available=True, 最后更新时间在4小时以内的
                c. 如果没有取出商品，放宽筛选条件：available=True, 最后更新在4个小时以内的。
                TODO: 这里的筛选做的比较简单，需要有一个更加合理的推送计划，比如根据商品在该群的销量、点击量以及商品的性质和群性质之间的匹配程度等进行商品推送
                e. 组包后向 ipad_weixin/send_msg_type 发送 get 请求，由 view函数进行图片or文本的判断，对数据进行发送
